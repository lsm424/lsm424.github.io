<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lsm424.github.io</id>
    <title>lsm424的博客</title>
    <updated>2022-01-29T07:21:54.805Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lsm424.github.io"/>
    <link rel="self" href="https://lsm424.github.io/atom.xml"/>
    <subtitle>怕什么真理无穷，进一寸有一寸的欢喜</subtitle>
    <logo>https://lsm424.github.io/images/avatar.png</logo>
    <icon>https://lsm424.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, lsm424的博客</rights>
    <entry>
        <title type="html"><![CDATA[map实现原理]]></title>
        <id>https://lsm424.github.io/post/map-shi-xian-yuan-li/</id>
        <link href="https://lsm424.github.io/post/map-shi-xian-yuan-li/">
        </link>
        <updated>2022-01-29T07:16:53.000Z</updated>
        <content type="html"><![CDATA[<p><strong>map使用Hash表作为底层实现，一个Hash表可以有多个bucket，而每个bucket保存了map中的一个或一组键值对</strong></p>
<h1 id="1-map的数据结构">1、map的数据结构</h1>
<p>map的数据结构由runtime/map.go:hmap 定义</p>
<pre><code>type hmap struct {
    count int  // 当前保存的元素
    B  uint8  // bucket数组的大小
    buckets  unsafe.Pointer  // bucket数组，数组的长度为2的B次方
    oldbuckets unsafe.Pointer  // 老旧bucket数组，用于扩容
    ...
}
</code></pre>
<p>如下展示了一个拥有4个bucket的map<br>
<img src="https://lsm424.github.io/post-images/1643440828994.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[slice实现原理]]></title>
        <id>https://lsm424.github.io/post/slice-shi-xian-yuan-li/</id>
        <link href="https://lsm424.github.io/post/slice-shi-xian-yuan-li/">
        </link>
        <updated>2022-01-28T14:28:44.000Z</updated>
        <content type="html"><![CDATA[<p><strong>切片依托数组实现，底层数组对用户屏蔽，在底层数据容量不足时可以实现自动重分配并生成新的slice</strong></p>
<h2 id="1-数据结构">1、数据结构</h2>
<p>源码包中src/runtime/slice.go: slice 定义了slice的数据结构：</p>
<pre><code>type slice struct {
    array unsafe.Pointer
    len int
    cap int 
}
</code></pre>
<p>从数据结构上看slice很清晰，array指针指向底层数组，len表示切片长度，cap表示底层数组容量</p>
<h2 id="2-切片操作">2、切片操作</h2>
<h3 id="1-使用make创建slice">1）、使用make创建slice</h3>
<p>可同时指定长度和容量，底层分配一个数组，数组的长度为容量，例如：slice := make([]int, 5, 10)，所创建的slice结构如下<br>
<img src="https://lsm424.github.io/post-images/1643433812483.png" alt="" width="400" loading="lazy"><br>
该slice长度为5，可使用下标slice[0]~slice[4]来操作里面的元素，capacity为10，表示后续向slice添加新元素不必重新分配内容，直到预留内存不足时再扩容</p>
<h3 id="2-使用数组创建slice">2)、使用数组创建slice</h3>
<p>使用数组创建slice时，slice将与原数组共用一部分内存，例如slice := array[5:7]语句所创建的slice结构如下：<br>
<img src="https://lsm424.github.io/post-images/1643434472348.jpg" alt="" width="400" loading="lazy"><br>
切片从数据array[5]开始，到数组array[7]结束（不含array[7]），即切片长度为2，数组后面的内容都作为切片的预留内存，即capacity为5，意味着数组和切片共享底层内存</p>
<h3 id="3-切片扩容">3）、切片扩容</h3>
<p>使用append向slice追加元素时，如果slice空间不足，则会触发slice扩容，扩容实际上是重新分配一个更大的内存，将原slice的数组拷贝进新的slice，然后返回新的slice，扩容后再将数据追加进去。例如向一个 cap为5且len也为5的slice再次追加1个元素时，就会发生扩容<br>
<img src="https://lsm424.github.io/post-images/1643434903681.jpg" alt="" width="400" loading="lazy"></p>
<p>扩容影响cap，会把数据拷贝到新的slice中，追加数据由append在扩容结束后完成，由上图可见，slice的长度为5，但是容量由5变成10，原来slice中的数据也都拷贝到了新的slice指向的数组中。</p>
<p>扩容的选择遵循以下原则：</p>
<ul>
<li>如果原slice的cap小雨1024，则新的容量扩大到原来的2倍。这种采用较大的扩容倍速，可以避免频繁扩容，从而减少内存分配次数和数据拷贝的代价</li>
<li>如果原slice的cap大于等于1024，则新的容量扩大到原来的1.25倍。这种采用较小的扩容倍速，可以避免浪费空间<br>
同时还会考虑元素类型与内存分配原则，对实际扩张做一些微调。</li>
</ul>
<h3 id="4-一些建议">4)、一些建议</h3>
<ul>
<li>
<p>创建切片可以根据实际需要分配容量，尽量避免在append过程中扩容，有利于提升性能。</p>
</li>
<li>
<p>拷贝切片时需要判断实际拷贝的元素个数</p>
</li>
<li>
<p>谨慎使用多个切片操作同一个数组，以防止读写冲突。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://lsm424.github.io/post/hello-gridea/</id>
        <link href="https://lsm424.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>
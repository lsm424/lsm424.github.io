<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lsm424.github.io</id>
    <title>lsm424的博客</title>
    <updated>2022-03-13T02:47:34.096Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lsm424.github.io"/>
    <link rel="self" href="https://lsm424.github.io/atom.xml"/>
    <subtitle>怕什么真理无穷，进一寸有一寸的欢喜</subtitle>
    <logo>https://lsm424.github.io/images/avatar.png</logo>
    <icon>https://lsm424.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, lsm424的博客</rights>
    <entry>
        <title type="html"><![CDATA[go内存管理]]></title>
        <id>https://lsm424.github.io/post/go-nei-cun-guan-li/</id>
        <link href="https://lsm424.github.io/post/go-nei-cun-guan-li/">
        </link>
        <updated>2022-03-13T02:14:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-内存分配">一、内存分配</h1>
<p>  go语言自带内存分配器，原理与tcmalloc类似，也就是说维护一块大的全局内存，每个线程（go中处理器P）维护一块小的私有内存，等私有内存不足时再从全局申请。</p>
<p>  另外，内存分配与GC有密切关系，所以了解GC之前要了解内存分配</p>
<h2 id="1-基础概念">1、基础概念：</h2>
<p>  go进程启动时向系统申请的内存如下三个区域<br>
<img src="https://lsm424.github.io/post-images/1647137857327.png" alt="" width="500" loading="lazy"><br>
  arena即堆区，应用所需要的内存从这里分配，spans和bitmap是为了管理arena区而存在的。arena划分成page页，<strong>每个页（page）大小为8KB</strong>，共有512GB/8KB个页</p>
<p>  spans区域存放span指针，每个指针对一个或者多个page，所以span区域的大小为512GB/8KB * 指针大小（8byte）=512MB</p>
<p>  bitmap区域的大小也是通过arena计算得到，不过主要用于GC</p>
<h3 id="1-span">1)、span</h3>
<p>  span是用于管理arena页的关键数据，每个span包含一个或者多个连续页，为了满足小对象分配，会将span中的一页划分成更小的粒度，而对于大对象比如超过页大小，则通过多页实现。<br>
（1）、class<br>
  根据对象大小，划分一系列class，每个class代表一个固定大小的对象，以及每个span的大小</p>
<pre><code>class	  bytes/obj		bytes/span      objects     waste bytes
1		8	        8192	        1024         0
2		16	        8192            512          0
...
1.              144             8192            56          128
...
66          32768		32768		
</code></pre>
<p>class：表示ID，该span可以处理的对象类型<br>
bytes/obj：该class代表对象的字节数<br>
bytes/span：每个span对象占用堆的字节数，即页数x页大小<br>
objects：每个span可以分配的对象个数，即（bytes/span）/ （bytes/obj）<br>
waste bytes：每个span产生的内存碎片，即（bytes/span）%（bytes/obj）</p>
<p>上面最大的对象为32KB，超过32KB的对象由class ID为0的class表示，每个class只能包含一个对象。</p>
<p>(2）、span数据结构<br>
  span是内存管理的基本单位，每个span用于管理特定的class对象。结构如下：</p>
<pre><code>// src/runtime/mheap.go: mspan
type mspan struct {
	next *mspan      // 链表后指针
	prev *mspan		 // 链表前指针
	startAddr uintptr  // 管理页起始地址
        npages uintptr		// 管理的页数
	nelems uintptr		// 块个数，即有多少个块可以分配
	allocBits	*gcBit	// 分配位图，每一位代表一个块是否已分配
        gcmarkBits   *gcBit // 引用分配位图，每一位代表一个块是否有引用，用于GC
	allocCount  uint16	// 已分配块的个数
	spanclass spanClass	 // class表中的class ID
	elemsize  uintptr	// class表的对象大小，即块大小
}
</code></pre>
<p>例如一个class 10的span如下：<br>
<img src="https://lsm424.github.io/post-images/1647138632277.png" alt="" width="500" loading="lazy"></p>
<h3 id="2-cache">2)  、cache</h3>
<p>  有了span，就要有管理span的数据结构，这个结构是mcentral，各线程需要内存时，从mcentral管理的span中申请内存，为了避免多线程申请内存时不断的加锁，Go为每个线程分配了span缓存，叫做cache。结构如下：</p>
<pre><code>// src/runtime/mcache.go: mcahe
type mcache struct {
	alloc	[67 * 2]*mspan	// 按照class分组的mspan列表
}
</code></pre>
<p>  数组的大小为class种类的2倍，每一个元素代表了一种class类型的span列表，每种class类型都有两组span列表。第一组列表表示的对象包含了指针；第二组不包含指针，这样gc时没必要扫描，提高gc性能。<br>
<img src="https://lsm424.github.io/post-images/1647138705399.png" alt="" width="500" loading="lazy"><br>
  cache在初始化时候没有任何span，在使用过程中动态从central获取并缓存。<br>
每种class的数量各不相同，如上图，class 0的个数比class1的个数要多，说明本线程中分配的小对象要多一些。</p>
<h3 id="3-central">3)、central</h3>
<p>  cache作为每个线程的私有资源，而central则为全局资源</p>
<pre><code>// src/runtime/mcentral.go: mcentral
type mcache struct {
	lock	mutex	// 互斥锁
	spanclass spanClass 	// span class ID
	nonempty mSpanList	// 指还有空闲块的span列表
	empty mSpanList	 // 指没有空闲块的span列表
	nmalloc	 uint64	 // 已累计分配的对象个数
}
</code></pre>
<p>线程从central中获取span的步骤如下：<br>
a、加锁<br>
b、从nonempty列表中获取一个可用的span，并将其从链表中删除。<br>
c、将取出的span放入empty链表<br>
d、将span返回给线程<br>
e、解锁<br>
g、线程将该span缓存进cache</p>
<h3 id="4-heap">4)、heap</h3>
<p>  从central的结构可见，每种central只管理特定规格的class的span。事实上每种class都会对应一个mcentral，这个mcentral的集合放于mheap中</p>
<pre><code>// src/runtime/mheap.go: mheap
type mheap struct {
	lock	mutex	// 互斥锁
	spans  []*mspan 	// span class ID
	bitmap  uintptr		// 指向bitmap的首地址，bitmap是从高地址向低地址增长的。
	arena_start uintptr  // 指示arena区域的首地址
 	arena_end uintptr	 // 指示arena区域已使用的地址位置。 
        central [67*2] struct {
		mcentral mcentral
        pad [sys.CacheLineSize - unsafe.Sizeof(mcentral{}) % sys.CacheLineSize] byte
   }
</code></pre>
<p>可见，mheap管理全部内存，事实上，go就是通过一个mheap类型的全局变量进行内存管理的。示意图如下<br>
<img src="https://lsm424.github.io/post-images/1647138823446.png" alt="" width="500" loading="lazy"></p>
<h2 id="2-内存分配">2、内存分配</h2>
<p>  针对对象大小不同有不同的分配逻辑：</p>
<ul>
<li>（0，16B）且不包含指针的对象：Tiny分配</li>
<li>（0，16B）且包含指针的对象：正常分配</li>
<li>[16B,32KB]：正常分配</li>
<li>（32KB，）：大对象分配<br>
  其中Tiny分配和大对象分配都属于内存管理的优化范畴，这里暂时仅关注正常分配的方法，以申请size为n的内存为例，分配步骤如下：<br>
a、获取当前线程私有换成mcache<br>
b、根据size计算出合同的class的ID<br>
c、从mcache的alloc[class]链表中查询可用的span<br>
d、如果mcache中没有可用的span，则从mcentral申请一个新的span加入mcache<br>
e、如果mcache中也没有可用的span，则从mheap中申请一个新的span加入mcentral。<br>
f、从该span中获取空闲对象的地址返回。</li>
</ul>
<h1 id="二-垃圾回收">二、垃圾回收</h1>
<h2 id="1-常用垃圾回收算法">1、常用垃圾回收算法：</h2>
<ul>
<li><strong>引用计数</strong>：对每个对象维护一个引用计数，当引用该对象的对象销毁时，引用计数减1，当引用计数位0时回收该对象<br>
              优点：对象可以很快回收，不会出现内存耗尽或达到某个阈值才回收<br>
              缺点：不能很好的处理循环引用，而且实时维护引用计数也有一定的代价。<br>
             代表语言：python、php</li>
<li><strong>标记清理</strong>：从根变量开始遍历所有的引用对象，引用对象标记为“被引用”，没有标记的对象被回收<br>
             优点：解决了引用计数的缺点<br>
             缺点：需要STW，即暂停程序运行。<br>
             代表语言：Go</li>
<li><strong>分代收集</strong>：按照对象生命周期的长短划分不同的代空间，生命周期长的放入老年代，而短的放入新生代，不同代有不同的回收算法和频率。<br>
             优点：回收性能好<br>
             缺点：算法复杂。<br>
             代表语言：Java</li>
</ul>
<h2 id="2-垃圾回收">2、垃圾回收</h2>
<h3 id="1-垃圾回收原理">1）、垃圾回收原理</h3>
<p>  垃圾回收从root对象开始扫描，把root对象引用的内存标记为“被应用”，考虑到内存块中存放的可能是指针，所以还需要递归标记。对未标记的内容全部标记为“未分配”完成回收<br>
  下图中，内存中的1、2、4号位上已经被分配，变量a、b为指针，执向内存的1、2号位。内存块的4号位曾经被引用过，但是现在没有任何引用，就需要被回收<br>
<img src="https://lsm424.github.io/post-images/1647139301261.png" alt="" width="500" loading="lazy"></p>
<h3 id="2-三色标记法">2）、三色标记法</h3>
<p>三色对应gc过程中的三种状态：</p>
<ul>
<li>灰色：对象还在标记队列中等待</li>
<li>黑色：对象已被标记，gcmarkBits对应的位为1（该对象不会在本次GC中被清理）</li>
<li>白色：对象未被标记，gcmarkBits对应的位为0（该对象会在本次GC中被清理）</li>
</ul>
<p>下面演示标记过程：<br>
  当内存有A-F6个对象，根对象a、b本身为栈上分配的局部变量，根对象a、b分别引用了对象A、B，而B对象又引用 了对象D，则GC开始前对各对象的状态如下所示。<br>
<img src="https://lsm424.github.io/post-images/1647139108825.png" alt="" width="500" loading="lazy"></p>
<p>  a）、初始状态下所有对象都是白色的，接着扫描根对象a、b，由于引用了A、B，则A、B变成灰色对象。<br>
<img src="https://lsm424.github.io/post-images/1647139141629.png" alt="" width="500" loading="lazy"><br>
  b）、接下来分析灰色对象，对于A，没有引用其他对象，很快变成黑色对象，B引用了D，则B转入黑色的同时会将D转成灰色，<br>
<img src="https://lsm424.github.io/post-images/1647139166916.png" alt="" width="500" loading="lazy"><br>
  c）、由于D没有引用其他对象，所以D转成黑色对象<br>
<img src="https://lsm424.github.io/post-images/1647139241662.png" alt="" width="500" loading="lazy"></p>
<h3 id="3-stw">3）、STW</h3>
<p>  对于GC，需要控制内存变化，否则在回收过程中指针传递会引起内存引用关系变化，如果错误的回收还在使用的内存，那么结果将是灾难性的。<br>
  Go中的STW就是停止所有的goroutine，专心做垃圾回收，待回收完成后再恢复goroutine。STW的长短直接影响了应用的执行。</p>
<h3 id="4-gc的触发时机">4）、GC的触发时机</h3>
<p>a、内存分配量达到阈值触发GC<br>
  每次内存分配时，当前内存分配量是否达到阈值，如果达到阈值则立即启动GC。</p>
<pre><code>阈值 = 上次GC内存分配量 x 内存增长率
</code></pre>
<p>  内存增长率由于环境变量GOGC控制，默认100，即当内存扩大一倍时启动GC。<br>
b、定期触发GC<br>
   默认情况下，最长2分钟触发一次GC，这个间隔在</p>
<pre><code>src/runtime/proc.go:forcegcperiod
var forcegcperiod int64 = 2 * 60 * 1e9
</code></pre>
<p>c、手动触发<br>
  .GC()手动触发，主要用于性能测试和统计。</p>
<h2 id="3-gc性能优化">3、GC性能优化</h2>
<p>  gc性能与对象数量负相关，对象数量越多，性能越差。<br>
  所以GC优化的思路之一是减少对象分配的个数，比如对象复用或者使用大结构组合多个小对象。<br>
另外，内存逃逸会产生一些隐式的内存分配，也有可能成为GC的负担。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树莓派公网查看usb摄像头]]></title>
        <id>https://lsm424.github.io/post/shu-mei-pai-gong-wang-cha-kan-usb-she-xiang-tou/</id>
        <link href="https://lsm424.github.io/post/shu-mei-pai-gong-wang-cha-kan-usb-she-xiang-tou/">
        </link>
        <updated>2022-02-06T14:38:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-确认usb摄像头正常">1、确认usb摄像头正常</h1>
<h2 id="1-分别在usb摄像头插入20usb口前后执行lsusb命令看到是否有摄像头设备">1）、分别在usb摄像头插入2.0usb口前后，执行lsusb命令，看到是否有摄像头设备</h2>
<h2 id="2-查看设备文件">2）、查看设备文件</h2>
<p>插上usb摄像头后，会多/dev/video0设备文件<br>
测试抓图</p>
<pre><code>sudo apt-get install fswebcam
fswebcam /dev/video0 ~/image.jpg
</code></pre>
<p>界面模式下测试实时视频</p>
<pre><code>sudo apt-get install luvcview
luvcview -s 1080x720
</code></pre>
<h1 id="2-安装mjpeg-stream">2、安装mjpeg-stream</h1>
<h2 id="1-安装依赖">1）、安装依赖</h2>
<pre><code>sudo apt-get install ibjpeg8-dev cmake git
</code></pre>
<h2 id="2-下载mjpeg-stream安装">2）、下载mjpeg-stream安装</h2>
<pre><code>wget https://github.com/jacksonliam/mjpg-streamer/archive/master.zip
unzip mjpg-streamer-master.zip
cd mjpg-streamer/mjpg-streamer-experimental
sudo make USE_LIBV4L2=true clean all 
sudo cp *.so /usr/lib/
</code></pre>
<p>以http服务启动usb摄像头</p>
<pre><code>mjpg_streamer -o &quot;output_http.so -w ./www&quot; -i &quot;input_uvc.so -r 960x720  -f 10 &quot;
</code></pre>
<p>浏览器访问&quot;树莓派局域网ip:8080&quot;，进入stream tab页查看视频流<br>
<img src="https://lsm424.github.io/post-images/1644158947261.png" alt="" width="500" loading="lazy"></p>
<h1 id="3-sunny-ngrok内网穿透访问摄像头">3、sunny-ngrok内网穿透访问摄像头</h1>
<p>1.7版本后的ngrok不可以自定义域名，而且它生成的域名会被微信屏蔽，选择国产的sunny-ngrok，可以免费配置自动的前置域名，而且不会被屏蔽</p>
<h2 id="1-注册">1）、注册</h2>
<p>访问https://www.ngrok.cc/注册<br>
需要实名认证、支付宝人脸识别</p>
<h2 id="2-购买隧道服务器">2）、购买隧道服务器</h2>
<p>进入“开通隧道”，选择最后免费的“美国Ngrok免费服务器”，其他的都是收费的，但是带宽都大很多<br>
<img src="https://lsm424.github.io/post-images/1644160027319.png" alt="" width="500" loading="lazy"><br>
配置内网穿透的端口，以及外网的域名<br>
<img src="https://lsm424.github.io/post-images/1644160230774.png" alt="" width="500" loading="lazy"></p>
<h2 id="3-启动内网穿透">3）、启动内网穿透</h2>
<p>进入“隧道管理”，看到刚才开通的隧道记录，找到对应的“隧道id”<br>
<img src="https://lsm424.github.io/post-images/1644160463525.png" alt="" width="500" loading="lazy"><br>
下载sunny-ngrok客户端，树莓派下载linux arm版本，输入如下命令启动隧道</p>
<pre><code>sunny clientid 隧道id
</code></pre>
<p>Forwarding即为公网域名<br>
<img src="https://lsm424.github.io/post-images/1644160664738.png" alt="" width="500" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树莓派推流b站]]></title>
        <id>https://lsm424.github.io/post/shu-mei-pai-tui-liu-b-zhan/</id>
        <link href="https://lsm424.github.io/post/shu-mei-pai-tui-liu-b-zhan/">
        </link>
        <updated>2022-02-06T09:16:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-安装ffmepg">1、安装ffmepg</h1>
<h2 id="1-安装yasm插件">1)、安装yasm插件</h2>
<pre><code>wget http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz
tar -xvf yasm-1.3.0.tar.gz
cd yasm-1.3.0/
./configure &amp;&amp; make &amp;&amp; sudo make install
</code></pre>
<h3 id="2-安装ffmpeg">2)、安装ffmpeg</h3>
<pre><code>wget http://www.ffmpeg.org/releases/ffmpeg-3.4.tar.gz
tar -xvf ffmpeg-3.4.tar.gz
cd ffmpeg-3.4/
./configure &amp;&amp; make &amp;&amp; sudo make install
</code></pre>
<p>这里编译会很久，差不多1个小时</p>
<h1 id="2-安装x264">2、安装x264</h1>
<pre><code>git clone git://git.videolan.org/x264.git
cd x264
#我们需要的是x264以.so or .a的形式来支援ffmpeg，所以一般就关注shared和static关键词就可以了
./configure --enable-shared --enable-static &amp;&amp; make &amp;&amp; sudo make install
</code></pre>
<p>这是采集摄像头数据需要的解码库</p>
<h1 id="2-开启b站直播间">2、开启b站直播间</h1>
<p><img src="https://lsm424.github.io/post-images/1644139446027.png" alt="" width="500" loading="lazy"><br>
将<strong>服务器地址</strong>和<strong>串流密钥</strong>拼接作为rmtp直播间推流地址，准备推流视频文件推流</p>
<pre><code>ffmpeg -re -i test.mp4 -vcodec copy -acodec aac -b:a 192k -f flv  'rtmp://live-push.bilivideo.com/live-bvc/?streamname=live_438452137_32469257&amp;key=ec69f90c6d679654c65bcd02c9411922&amp;schedule=rtmp&amp;pflag=1'
</code></pre>
<p>然后可以进入直播间看到视频内容了。</p>
<p><strong>关于-re参数的作用：<br>
默认情况下，ffmpeg尝试以尽可能快的速度读取输入，在直播时会会产生跳帧，而-re会将输入的读取速度降低到输入的本地帧速率。它对于实时输出(例如直播流)很有用。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[slice实验原理]]></title>
        <id>https://lsm424.github.io/post/slice-shi-yan-yuan-li/</id>
        <link href="https://lsm424.github.io/post/slice-shi-yan-yuan-li/">
        </link>
        <updated>2022-02-06T09:11:41.000Z</updated>
        <content type="html"><![CDATA[<p>切片依托数组实现，底层数组对用户屏蔽，在底层数据容量不足时可以实现自动重分配并生成新的slice</p>
<h1 id="1-数据结构">1、数据结构</h1>
<p>源码包中src/runtime/slice.go: slice 定义了slice的数据结构：</p>
<pre><code>type slice struct {
    array unsafe.Pointer
    len int
    cap int 
}
</code></pre>
<p>从数据结构上看slice很清晰，array指针指向底层数组，len表示切片长度，cap表示底层数组容量</p>
<h1 id="2-切片操作">2、切片操作</h1>
<h2 id="1-使用make创建slice">1）、使用make创建slice</h2>
<p>可同时指定长度和容量，底层分配一个数组，数组的长度为容量，例如：slice := make([]int, 5, 10)，所创建的slice结构如下<br>
<img src="https://lsm424.github.io/post-images/1644138788104.png" alt="" width="500" loading="lazy"><br>
该slice长度为5，可使用下标slice[0]~slice[4]来操作里面的元素，capacity为10，表示后续向slice添加新元素不必重新分配内容，直到预留内存不足时再扩容</p>
<h2 id="2-使用数组创建slice">2)、使用数组创建slice</h2>
<p>使用数组创建slice时，slice将与原数组共用一部分内存，例如slice := array[5:7]语句所创建的slice结构如下：<br>
<img src="https://lsm424.github.io/post-images/1644138834532.jpg" alt="" width="500" loading="lazy"><br>
切片从数据array[5]开始，到数组array[7]结束（不含array[7]），即切片长度为2，数组后面的内容都作为切片的预留内存，即capacity为5，意味着数组和切片共享底层内存</p>
<h2 id="3-切片扩容">3）、切片扩容</h2>
<p>使用append向slice追加元素时，如果slice空间不足，则会触发slice扩容，扩容实际上是重新分配一个更大的内存，将原slice的数组拷贝进新的slice，然后返回新的slice，扩容后再将数据追加进去。例如向一个 cap为5且len也为5的slice再次追加1个元素时，就会发生扩容<br>
<img src="https://lsm424.github.io/post-images/1644138850769.jpg" alt="" width="500" loading="lazy"></p>
<p>扩容影响cap，会把数据拷贝到新的slice中，追加数据由append在扩容结束后完成，由上图可见，slice的长度为5，但是容量由5变成10，原来slice中的数据也都拷贝到了新的slice指向的数组中。</p>
<p>扩容的选择遵循以下原则：</p>
<p>如果原slice的cap小雨1024，则新的容量扩大到原来的2倍。这种采用较大的扩容倍速，可以避免频繁扩容，从而减少内存分配次数和数据拷贝的代价<br>
如果原slice的cap大于等于1024，则新的容量扩大到原来的1.25倍。这种采用较小的扩容倍速，可以避免浪费空间<br>
同时还会考虑元素类型与内存分配原则，对实际扩张做一些微调。<br>
4)、一些建议<br>
创建切片可以根据实际需要分配容量，尽量避免在append过程中扩容，有利于提升性能。</p>
<p>拷贝切片时需要判断实际拷贝的元素个数</p>
<p>谨慎使用多个切片操作同一个数组，以防止读写冲突。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[树莓派装机]]></title>
        <id>https://lsm424.github.io/post/shu-mei-pai-zhuang-ji/</id>
        <link href="https://lsm424.github.io/post/shu-mei-pai-zhuang-ji/">
        </link>
        <updated>2022-01-31T14:20:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-下载镜像">1、下载镜像</h1>
<p>一般选择从官方的镜像 Raspbian OS，但是官网的比较慢，一般选择国内镜像下载，有两个：</p>
<ul>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/">TUNA镜像站</a></li>
<li><a href="https://mirrors.sjtug.sjtu.edu.cn/raspberry-pi-os-images/">SJTUG镜像站</a></li>
</ul>
<p>同一个版本的镜像分为三种：</p>
<ul>
<li><strong>Raspberry Pi OS with desktop</strong> 即桌面版，1G左右大小，包含基本的软件</li>
<li><strong>Raspberry Pi OS with desktop and recommended software</strong>即full版本，包含一些办公软件，会比较大，3G左右，</li>
<li><strong>Raspberry Pi OS Lite</strong>即轻量级版，不带桌面，不到500M</li>
</ul>
<p>一般选择大小中等的桌面版，因为full版本太大，刷机时间以及磁盘占用都增加，包含的软件一般实际用不到，除非真的是办公使用，而轻量级版本缺少桌面，在一些配置方面不是很方面。常用的桌面版直达门：<br>
<a href="https://mirrors.sjtug.sjtu.edu.cn/raspberry-pi-os-images/raspios_armhf/images/raspios_armhf-2021-11-08/2021-10-30-raspios-bullseye-armhf.zip">2021-10-30 推荐版</a></p>
<h1 id="2-下载刷镜像软件raspberry-pi-imager">2、下载刷镜像软件Raspberry Pi Imager</h1>
<p>到官网下载刷机软件：https://www.raspberrypi.com/software/<br>
软件直达门<br>
<a href="https://downloads.raspberrypi.org/imager/imager_1.6.2.exe">windows版本</a><br>
<a href="https://downloads.raspberrypi.org/imager/imager_1.6.2.dmg">mac版本</a></p>
<h1 id="3-刷机">3、刷机</h1>
<p>可以使用u盘或者sd卡刷机，对于这二者方式的刷机和启动没有任何区别。树莓派会优先从sd卡启动，没有的话就会使用usb接口启动。</p>
<h2 id="31-刷机步骤">3.1 刷机步骤：</h2>
<p>将u盘或者tf卡插入电脑，启动上一步下载的Raspberry Pi Imager，选择刚插入的磁盘，再选择第一步下载的镜像，点击write，等待10分钟左右完成。</p>
<h2 id="32-重新刷机">3.2 重新刷机</h2>
<p>进入windows的磁盘管理或者使用diskgenius，清理分区（包括boot、root分区），重新新建分区，再格式化，最后再重新按照上一步刷机。</p>
<h2 id="33-常见问题">3.3 常见问题</h2>
<h3 id="331-刷机后我的磁盘怎么变小了">3.3.1 刷机后我的磁盘怎么变小了</h3>
<p>刷机后，windows你可能上看到十几个G的u盘或者sd卡只有200M了，不要惊慌！这是因为linux的分区在windows下看不到。装了Linux系统之后，SD卡会分成三种格式的分区，分别是：FAT32、EXT3、SWAP2。<br>
Ext3区属于linux的文件系统，就和win的系统盘C盘一样<br>
Swap区为linux的虚拟内存区，主要在物理内存不够用的时候，做缓存用的。<br>
以上两个，是Linux系统的分区。<br>
FAT32就是那“200M”了</p>
<h3 id="332-到底用u盘还是sd卡呢">3.3.2 到底用u盘还是sd卡呢</h3>
<p>经验表明：<strong>使用tf卡会十分卡顿</strong>，第一次开机都要三四分钟，<strong>使用了ssd的移动硬盘接usb3.0速度超快</strong>，开机速度10秒左右，测试过ssd的读写速度如下：</p>
<pre><code>pi@raspberrypi:~ $ dd if=/dev/zero of=/tmp/output.img bs=4k count=256k
记录了262144+0 的读入
记录了262144+0 的写出
1073741824字节（1.1 GB，1.0 GiB）已复制，5.59087 s，192 MB/s
pi@raspberrypi:~ $ dd if=/tmp/output.img bs=4k of=/dev/null
记录了262144+0 的读入
记录了262144+0 的写出
1073741824字节（1.1 GB，1.0 GiB）已复制，4.06454 s，264 MB/s
</code></pre>
<p>从上面测试结果可以看出，写入速度192MB/s，读取速度264MB/s！</p>
<h3 id="333-有时刷机出现锁该卷时发生错误-错误5-拒绝访问">3.3.3 有时刷机出现“锁该卷时发生错误 错误5 拒绝访问”</h3>
<p>win+R进入cmd指向如下命令：<br>
1、diskpart<br>
2、list disk  # 查看所有磁盘，找到u盘或者sd卡所在的磁盘编号<br>
3、select disk 2   # 2要改成具体你所使用磁盘的编号<br>
4、clean</p>
<h1 id="4-启动并设置ssh">4、启动并设置ssh</h1>
<p>插入sd卡或者u盘，接上hdmi显示器，耐心等待一会（期间可能会有短暂黑屏），会出现桌面，第一次登录会引导设置语言、pi用户密码、wifi、以及软件更新（这一步建议跳过）.</p>
<h1 id="5-设置ssh-vnc">5、设置ssh、vnc</h1>
<p>设置ssh、vnc，方面后续无线连接进行开发<br>
进入rasp-config<br>
<img src="https://lsm424.github.io/post-images/1643643523857.png" alt="" width="400" loading="lazy"><br>
将下列ssh、vnc勾选，启动服务<br>
<img src="https://lsm424.github.io/post-images/1643643643084.png" alt="" width="400" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[map实现原理]]></title>
        <id>https://lsm424.github.io/post/map-shi-xian-yuan-li/</id>
        <link href="https://lsm424.github.io/post/map-shi-xian-yuan-li/">
        </link>
        <updated>2022-01-29T07:16:53.000Z</updated>
        <content type="html"><![CDATA[<p><strong>map使用Hash表作为底层实现，一个Hash表可以有多个bucket，而每个bucket保存了map中的一个或一组键值对</strong></p>
<h1 id="1-map的数据结构">1、map的数据结构</h1>
<p>  map的数据结构由runtime/map.go:hmap 定义</p>
<pre><code>type hmap struct {
    count int  // 当前保存的元素
    B  uint8  // bucket数组的大小
    buckets  unsafe.Pointer  // bucket数组，数组的长度为2的B次方
    oldbuckets unsafe.Pointer  // 老旧bucket数组，用于扩容
    ...
}
</code></pre>
<p>如下展示了一个拥有4个bucket的map<br>
<img src="https://lsm424.github.io/post-images/1643440828994.jpg" alt="" width="500" loading="lazy"><br>
本例中，由于B=2，所以buckets数组的长读为4（2的2次方），元素通过hash运算后会落到谬个bucket中进行存储。</p>
<h1 id="2-bucket的数据结构">2、bucket的数据结构</h1>
<p>  bucket的数据结构由runtime/map.go：bmap 定义：</p>
<pre><code>type bmap struct {
    tophash [8]uint8  // 存储hash值的高8位
    data  []byte  // key value数据：key/key/key/.../value/value/value...
    overflow *hmap   // 溢出bucket的地址
}
</code></pre>
<p>  每个bucket可以存储8个键值对。tophash是一个长度为8的整形数组，Hash值低位相同的键存入当前bucket时会将Hash值的高位存储在该数组中，以便后续匹配。 data存key value数据，它的存放顺序是为了节省字节对齐带来的空间浪费。overflow指针指向的是下一个bucket，据此将所有冲突的键连接起来。</p>
<p>下图展示了bucket存放了8个key-value对<br>
<img src="https://lsm424.github.io/post-images/1643441145328.jpg" alt="" width="500" loading="lazy"></p>
<h1 id="3-hash冲突">3、Hash冲突</h1>
<p>  当两个相同key被Hash到同一个bucket时，我们称之为发生冲突，go使用链地址法解决冲突，由于每一个bmap只能存储8个冲突的键值对，超过8个时，就分配一个新的bmap，下图展示冲突后的map<br>
<img src="https://lsm424.github.io/post-images/1643441260079.jpg" alt="" width="650" loading="lazy"><br>
冲突不是一件好事，它降低存取效率。</p>
<h1 id="4-冲突因子">4、冲突因子</h1>
<p>  冲突因子用于衡量一个hash表的冲突情况，公式为：<code>负载因子=键数量 / bucket数量</code><br>
  如果负载因子过大，说明空间利用率低，反之冲突严重，存取效率低。<br>
  当hash表的负载因子过大时，需要申请更多的bucket，并对所有的键值对重新组织，使其均匀的分布到这些buket中，这个过程位rehash。<br>
  不同hash表的实现对负载因子的容忍程度不同，比如redis的map实现中负载因子大于1时就会触发rehash，而go的map则在负载因子达到6.5时触发rehash，因为redis的每个bucket只能存1个键值对，而go的map可以容忍更大的负载因子。</p>
<h1 id="5-扩容">5、扩容</h1>
<h2 id="1-扩容条件">1）、扩容条件</h2>
<p>  降低负载因子常用的手段是扩容，当新元素要添加到map时会检查是否要扩容，扩容实际上是空间换时间的手段。<br>
  触发扩容需要满足以下任一条件：</p>
<ul>
<li>负载因子大于6.5时，即平均每个bucket存储到的键值对达到6.5个以上。</li>
<li>overflow的数量大于2的15次方，即overflow的数量超过32768。</li>
</ul>
<h2 id="2-增量扩容">2）、增量扩容</h2>
<p>  如果map存储了数以亿计的键值对，一次性搬迁会造成比较大的延时，所以go采用了逐步搬迁的策略，即每次访问map时会触发一次搬迁，每次搬迁2个键值对。下图包含了1个bucket满载的map。<br>
<img src="https://lsm424.github.io/post-images/1643450425464.jpg" alt="" width="650" loading="lazy"><br>
  当前map存储了7个键值对，只有1个bucket，因此负载因子为7，再次添加数据时会触发扩容，扩容之后再将新的键值对写入新的bucket中，当添加第8个键值对时，扩容后的示意图如下：<br>
<img src="https://lsm424.github.io/post-images/1643450462801.jpg" alt="" width="650" loading="lazy"><br>
  扩容时的处理非常巧妙，先是让hmap数据结构中的oldbuckets成员指向原buckets数组，然后申请新的bucket数组（长度为原来的2倍），并将数组指针保存到hmap数据结构中的bucktets成员中，这样就完成了新老buckets数组的交换，后续的迁移工作是从oldbuckets数组中逐步搬迁键值对到新的buckets数组中。待oldbuckest数组中的所有键值对搬迁完毕后，就可以安全的释放oldbuckets数组了。</p>
<h1 id="6-增删查改">6、增删查改</h1>
<h2 id="1-查询">1）、查询</h2>
<p>  根据key值计算hash值，取hash值的低位与hmap.B取模来确定bucket的位置，取hash值高位，在tophash数组中查询；如果tophash[i]中存储的hash值与当前key 的Hash值相同，则获取tophash[i]的key值进行比较。如果当前bucket中没有找到，则从溢出bucket中查询。</p>
<p><em>注意：如果当前map在搬迁过程中，则优先从oldbuckets数组中查找，不再从新的buckets数组中查找。</em></p>
<h2 id="2-更新-增加">2）、更新、增加</h2>
<p>  根据key值计算hash值，取hash值的低位与hmap.B取模来确定bucket的位置，查找该key是否已经存在，如果存在则直接更新值。如果key不存在，则从该bucket中寻找空余位置并插入。</p>
<p><em>注意：如果当前map处于搬迁过程中，那么新元素会直接添加到新的buckets数组中，但是查找过程仍然从oldbuckets数组中开始。</em></p>
<h2 id="3-删除">3）、删除</h2>
<p>  删除元素实际上是先查找元素，如果元素存在则把元素从相同的bucket中清理，否则什么都不做。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://lsm424.github.io/post/hello-gridea/</id>
        <link href="https://lsm424.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>